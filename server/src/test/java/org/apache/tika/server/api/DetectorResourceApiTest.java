/**
 * Tika JAX-RS Server
 * The Tika server implements [JAX-RS](http://en.wikipedia.org/wiki/JAX-RS) (Java API for RESTful Web Services) to provide web services according to the Representational State Transfer (REST) architectural style. This facilitates a wide varity oif operations and flexibility with regards to both client and server implementations. The officially supported Tika server implementation is packaged using the OpenAPI [jaxrs-cxf generator](https://openapi-generator.tech/docs/generators/jaxrs-cxf]. This work was tracked through [TIKA-3082](https://issues.apache.org/jira/browse/TIKA-3082). <b>N.B.</b> the OpenAPI version always tracks the underlying Tika version to remove uncertainty about which version of Tika is running within the server.
 *
 * The version of the OpenAPI document: 2.0.0-SNAPSHOT
 * Contact: dev@tika.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.apache.tika.server.api;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.Response;

import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;
import org.apache.tika.server.TikaServerParseExceptionMapper;
import org.apache.tika.server.api.impl.DetectorResourceApiServiceImpl;
import org.apache.tika.server.writer.TarWriter;
import org.apache.tika.server.writer.ZipWriter;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

/**
 * Tika JAX-RS Server
 *
 * <p>The Tika server implements [JAX-RS](http://en.wikipedia.org/wiki/JAX-RS) (Java API for RESTful Web Services) to provide web services according to the Representational State Transfer (REST) architectural style. This facilitates a wide varity oif operations and flexibility with regards to both client and server implementations. The officially supported Tika server implementation is packaged using the OpenAPI [jaxrs-cxf generator](https://openapi-generator.tech/docs/generators/jaxrs-cxf]. This work was tracked through [TIKA-3082](https://issues.apache.org/jira/browse/TIKA-3082). <b>N.B.</b> the OpenAPI version always tracks the underlying Tika version to remove uncertainty about which version of Tika is running within the server.
 *
 * API tests for DetectorResourceApi 
 */
public class DetectorResourceApiTest extends CXFTestBase{


    private DetectorResourceApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://localhost:9998", DetectorResourceApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    private static final String DETECT_PATH = "/detect";
    private static final String DETECT_STREAM_PATH = DETECT_PATH + "/stream";
    private static final String FOO_CSV = "foo.csv";
    private static final String CDEC_CSV_NO_EXT = "CDEC_WEATHER_2010_03_02";

    @Override
    protected void setUpResources(JAXRSServerFactoryBean sf) {
        sf.setResourceClasses(DetectorResourceApiServiceImpl.class);
        sf.setResourceProvider(DetectorResourceApiServiceImpl.class,
                new SingletonResourceProvider(new DetectorResourceApiServiceImpl()));

    }

    @Override
    protected void setUpProviders(JAXRSServerFactoryBean sf) {
        List<Object> providers = new ArrayList<Object>();
        providers.add(new TarWriter());
        providers.add(new ZipWriter());
        providers.add(new TikaServerParseExceptionMapper(false));
        sf.setProviders(providers);

    }

    @Test
    public void testDetectCsvWithExt() throws Exception {
        String url = endPoint + DETECT_STREAM_PATH;
        Response response = WebClient
                .create(endPoint + DETECT_STREAM_PATH)
                .type("text/csv")
                .accept("*/*")
                .header("Content-Disposition",
                        "attachment; filename=" + FOO_CSV)
                .put(ClassLoader.getSystemResourceAsStream(FOO_CSV));
        assertNotNull(response);
        String readMime = getStringFromInputStream((InputStream) response
                .getEntity());
        assertEquals("text/csv", readMime);

    }

    @Test
    public void testDetectCsvNoExt() throws Exception {
        String url = endPoint + DETECT_STREAM_PATH;
        Response response = WebClient
                .create(endPoint + DETECT_STREAM_PATH)
                .type("text/csv")
                .accept("*/*")
                .header("Content-Disposition",
                        "attachment; filename=" + CDEC_CSV_NO_EXT)
                .put(ClassLoader.getSystemResourceAsStream(CDEC_CSV_NO_EXT));
        assertNotNull(response);
        String readMime = getStringFromInputStream((InputStream) response
                .getEntity());
        assertEquals("text/plain", readMime);

        // now trick it by adding .csv to the end
        response = WebClient
                .create(endPoint + DETECT_STREAM_PATH)
                .type("text/csv")
                .accept("*/*")
                .header("Content-Disposition",
                        "attachment; filename=" + CDEC_CSV_NO_EXT + ".csv")
                .put(ClassLoader.getSystemResourceAsStream(CDEC_CSV_NO_EXT));
        assertNotNull(response);
        readMime = getStringFromInputStream((InputStream) response.getEntity());
        assertEquals("text/csv", readMime);

    }

    
    /**
     * PUT a document and use the default detector to identify the MIME/media type.
     *
     * PUT a document and use the default detector to identify the MIME/media type. The caveat here is that providing a hint for the filename can increase the quality of detection. Default return is a string of the Media type name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putStreamTest() {
        //String response = api.putStream();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
